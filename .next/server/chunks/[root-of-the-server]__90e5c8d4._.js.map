{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/sanyam/Documents/glomnidesigns/app/api/test-openai/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nexport async function GET() {\n  try {\n    if (!process.env.OPENAI_API_KEY) {\n      return NextResponse.json({ \n        success: false,\n        error: 'OpenAI API key not found in environment variables' \n      }, { status: 500 });\n    }\n\n    // Test API key with a simple models request\n    const response = await fetch('https://api.openai.com/v1/models', {\n      headers: {\n        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      return NextResponse.json({ \n        success: false,\n        error: 'API key validation failed', \n        details: error \n      }, { status: 401 });\n    }\n\n    const data = await response.json();\n    \n    // Check if DALL-E and GPT-4 models are available\n    const availableModels = data.data?.map((m: any) => m.id) || [];\n    const hasGPT4 = availableModels.some((model: string) => model.includes('gpt-4'));\n    const hasDallE = availableModels.some((model: string) => model.includes('dall-e'));\n\n    return NextResponse.json({ \n      success: true, \n      message: 'OpenAI API key is working perfectly!',\n      capabilities: {\n        gpt4Available: hasGPT4,\n        dalleAvailable: hasDallE,\n        totalModels: availableModels.length\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('OpenAI test error:', error);\n    return NextResponse.json({ \n      success: false,\n      error: 'Test failed', \n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IACpB,IAAI;QACF,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,4CAA4C;QAC5C,MAAM,WAAW,MAAM,MAAM,oCAAoC;YAC/D,SAAS;gBACP,iBAAiB,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,cAAc,EAAE;gBACvD,gBAAgB;YAClB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;gBACP,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,iDAAiD;QACjD,MAAM,kBAAkB,KAAK,IAAI,EAAE,IAAI,CAAC,IAAW,EAAE,EAAE,KAAK,EAAE;QAC9D,MAAM,UAAU,gBAAgB,IAAI,CAAC,CAAC,QAAkB,MAAM,QAAQ,CAAC;QACvE,MAAM,WAAW,gBAAgB,IAAI,CAAC,CAAC,QAAkB,MAAM,QAAQ,CAAC;QAExE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,cAAc;gBACZ,eAAe;gBACf,gBAAgB;gBAChB,aAAa,gBAAgB,MAAM;YACrC;YACA,WAAW,IAAI,OAAO,WAAW;QACnC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}