{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/sanyam/Documents/glomnidesigns/app/api/generate-interior-design/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { image, style, roomType, prompt } = await req.json();\n\n    // Validate required fields\n    if (!image || !style || !roomType) {\n      return NextResponse.json(\n        { error: 'Missing required fields: image, style, and roomType' },\n        { status: 400 }\n      );\n    }\n\n    // Check if API key exists\n    if (!process.env.OPENAI_API_KEY) {\n      return NextResponse.json(\n        { error: 'OpenAI API key not configured' },\n        { status: 500 }\n      );\n    }\n\n    console.log('üîë Using API key:', process.env.OPENAI_API_KEY.substring(0, 10) + '...');\n\n    // Step 1: Analyze the uploaded image with GPT-4 Vision\n    const analysisResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: \"gpt-4-turbo\", // Using more stable model for test\n        messages: [\n          {\n            role: \"user\",\n            content: [\n              {\n                type: \"text\",\n                text: `Analyze this ${roomType} image and create a detailed, professional interior design prompt for image generation. The design should be in ${style} style. Include specific details about furniture placement, color schemes, lighting, materials, and decor elements. Additional requirements: ${prompt || 'Create a modern, elegant, and functional space.'}`\n              },\n              {\n                type: \"image_url\",\n                image_url: { \n                  url: image,\n                  detail: \"high\"\n                }\n              }\n            ]\n          }\n        ],\n        max_tokens: 500,\n        temperature: 0.7\n      }),\n    });\n\n    if (!analysisResponse.ok) {\n      const errorData = await analysisResponse.json();\n      console.error('‚ùå Vision API Error:', errorData);\n      return NextResponse.json(\n        { \n          error: 'Failed to analyze image', \n          details: errorData.error?.message || 'Unknown error'\n        },\n        { status: 500 }\n      );\n    }\n\n    const analysisResult = await analysisResponse.json();\n    const designPrompt = analysisResult.choices?.[0]?.message?.content;\n\n    if (!designPrompt) {\n      return NextResponse.json(\n        { error: 'Failed to generate design analysis' },\n        { status: 500 }\n      );\n    }\n\n    console.log('‚úÖ Generated design prompt:', designPrompt.substring(0, 100) + '...');\n\n    // Step 2: Generate new image with DALL-E 3\n    const imageResponse = await fetch('https://api.openai.com/v1/images/generations', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: \"dall-e-3\",\n        prompt: `Professional interior design rendering: ${designPrompt}. High-quality, photorealistic, architectural photography style, well-lit, professional interior design magazine quality.`,\n        n: 1,\n        size: \"1024x1024\",\n        quality: \"standard\", // Using standard for test key to save costs\n        style: \"natural\"\n      }),\n    });\n\n    if (!imageResponse.ok) {\n      const errorData = await imageResponse.json();\n      console.error('‚ùå DALL-E Error:', errorData);\n      return NextResponse.json(\n        { \n          error: 'Failed to generate design image', \n          details: errorData.error?.message || 'Unknown error'\n        },\n        { status: 500 }\n      );\n    }\n\n    const imageResult = await imageResponse.json();\n    \n    if (!imageResult.data?.[0]?.url) {\n      return NextResponse.json(\n        { error: 'No image generated' },\n        { status: 500 }\n      );\n    }\n\n    console.log('‚úÖ Successfully generated image!');\n    \n    return NextResponse.json({\n      success: true,\n      generatedImage: imageResult.data[0].url,\n      analysisPrompt: designPrompt,\n      style: style,\n      roomType: roomType,\n      timestamp: new Date().toISOString(),\n      apiUsage: {\n        visionTokens: analysisResult.usage?.total_tokens || 0,\n        imageGeneration: 1\n      }\n    });\n\n  } catch (error) {\n    console.error('üî• API Error:', error);\n    return NextResponse.json(\n      { \n        error: 'Internal server error',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}