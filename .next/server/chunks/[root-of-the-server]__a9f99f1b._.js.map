{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/sanyam/Documents/glomnidesigns/app/api/generate-interior-design/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { image, style, roomType, prompt } = await req.json();\n\n    // Validate required fields\n    if (!image || !style || !roomType) {\n      return NextResponse.json(\n        { error: 'Missing required fields: image, style, and roomType' },\n        { status: 400 }\n      );\n    }\n\n    if (!process.env.OPENAI_API_KEY) {\n      return NextResponse.json(\n        { error: 'OpenAI API key not configured' },\n        { status: 500 }\n      );\n    }\n\n    // ‚úÖ Enhanced Step 1: Detailed room analysis\n    const analysisResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: \"gpt-4-turbo\",\n        messages: [\n          {\n            role: \"user\",\n            content: [\n              {\n                type: \"text\",\n                text: `You are a professional interior designer. Analyze this ${roomType} image in detail and provide:\n\n1. **Room Layout Description**: Describe the exact layout, room dimensions, window placements, door positions, and architectural features you see.\n\n2. **Existing Elements**: List current furniture, fixtures, flooring, walls, ceiling details.\n\n3. **Design Transformation Plan**: Create a detailed plan to transform this space into ${style} style while maintaining the EXACT same room layout and architectural structure.\n\n4. **DALL-E Prompt**: Generate a detailed DALL-E prompt that includes:\n   - Exact room dimensions and layout from the original image\n   - Window and door positions\n   - Architectural features to maintain\n   - ${style} style furniture and decor to add\n   - Professional lighting and photography style\n\nAdditional requirements: ${prompt || 'Create a cohesive, elegant design'}\n\nFormat your response as JSON with keys: \"roomAnalysis\", \"existingElements\", \"designPlan\", \"dallePrompt\"`\n              },\n              {\n                type: \"image_url\",\n                image_url: { \n                  url: image,\n                  detail: \"high\"\n                }\n              }\n            ]\n          }\n        ],\n        max_tokens: 1000,\n        temperature: 0.7\n      }),\n    });\n\n    if (!analysisResponse.ok) {\n      const errorData = await analysisResponse.json();\n      console.error('‚ùå Vision API Error:', errorData);\n      return NextResponse.json(\n        { \n          error: 'Failed to analyze image', \n          details: errorData.error?.message || 'Unknown error'\n        },\n        { status: 500 }\n      );\n    }\n\n    const analysisResult = await analysisResponse.json();\n    let designAnalysis;\n\n    try {\n      // ‚úÖ Parse the structured response\n      const analysisContent = analysisResult.choices?.[0]?.message?.content;\n      designAnalysis = JSON.parse(analysisContent);\n    } catch (e) {\n      // Fallback if JSON parsing fails\n      const analysisContent = analysisResult.choices?.[0]?.message?.content;\n      designAnalysis = {\n        dallePrompt: analysisContent\n      };\n    }\n\n    // ‚úÖ Enhanced Step 2: Generate image with detailed layout preservation\n    const enhancedPrompt = `\nProfessional interior design photograph: ${designAnalysis.dallePrompt || designAnalysis}\n\nIMPORTANT SPECIFICATIONS:\n- Maintain EXACT room proportions and layout\n- Keep all architectural elements (windows, doors, walls, ceiling) in their original positions\n- Apply ${style} interior design style thoughtfully\n- Use professional architectural photography lighting\n- High-resolution, magazine-quality interior design photo\n- Realistic textures and materials\n- Proper scale and proportions\n- Natural lighting that complements the space\n\nStyle: ${style} | Room: ${roomType}\n    `.trim();\n\n    const imageResponse = await fetch('https://api.openai.com/v1/images/generations', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: \"dall-e-3\",\n        prompt: enhancedPrompt,\n        n: 1,\n        size: \"1024x1024\",\n        quality: \"hd\", // ‚úÖ Use HD for better results\n        style: \"natural\"\n      }),\n    });\n\n    if (!imageResponse.ok) {\n      const errorData = await imageResponse.json();\n      console.error('‚ùå DALL-E Error:', errorData);\n      return NextResponse.json(\n        { \n          error: 'Failed to generate design image', \n          details: errorData.error?.message || 'Unknown error'\n        },\n        { status: 500 }\n      );\n    }\n\n    const imageResult = await imageResponse.json();\n    \n    if (!imageResult.data?.[0]?.url) {\n      return NextResponse.json(\n        { error: 'No image generated' },\n        { status: 500 }\n      );\n    }\n\n    console.log('‚úÖ Successfully generated contextual design!');\n    \n    return NextResponse.json({\n      success: true,\n      generatedImage: imageResult.data[0].url,\n      analysisPrompt: designAnalysis.roomAnalysis || 'Room analyzed successfully',\n      designPlan: designAnalysis.designPlan || 'Design plan created',\n      style: style,\n      roomType: roomType,\n      timestamp: new Date().toISOString(),\n      apiUsage: {\n        visionTokens: analysisResult.usage?.total_tokens || 0,\n        imageGeneration: 1\n      }\n    });\n\n  } catch (error) {\n    console.error('üî• API Error:', error);\n    return NextResponse.json(\n      { \n        error: 'Internal server error',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}